{
  "B101": {
    "title": "B101: Test for use of assert",
    "description": "This plugin test checks for the use of the Python assert keyword. It was discovered that some projects used assert to enforce interface constraints. However, assert is removed with compiling to optimised byte code (python -o producing *.pyo files). This caused various protections to be removed. The use of assert is also considered as general bad practice in OpenStack codebases. Please see https://docs.python.org/2/reference/simple_stmts.html#the-assert-statement for more info on assert."
  },
  "B102": {
    "title": "B102: Test for the use of exec",
    "description": "This plugin test checks for the use of Python’s exec method or keyword. The Python docs succinctly describe why the use of exec is risky."
  },
  "B103": {
    "title": "B103: Test for setting permissive file permissions",
    "description": "POSIX based operating systems utilize a permissions model to protect access to parts of the file system. This model supports three roles “owner”, “group” and “world” each role may have a combination of “read”, “write” or “execute” flags sets. Python provides chmod to manipulate POSIX style permissions. This plugin test looks for the use of chmod and will alert when it is used to set particularly permissive control flags. A MEDIUM warning is generated if a file is set to group executable and a HIGH warning is reported if a file is set world writable. Warnings are given with HIGH confidence."
  },
  "B104": {
    "title": "B104: Test for binding to all interfaces",
    "description": "Binding to all network interfaces can potentially open up a service to traffic on unintended interfaces, that may not be properly documented or secured. This plugin test looks for a string pattern “0.0.0.0” that may indicate a hardcoded binding to all network interfaces."
  },
  "B105": {
    "title": "B105: Test for use of hard-coded password strings",
    "description": "The use of hard-coded passwords increases the possibility of password guessing tremendously. This plugin test looks for all string literals and checks the following conditions: assigned to a variable that looks like a password, assigned to a dict key that looks like a password, used in a comparison with a variable that looks like a password. Variables are considered to look like a password if they have match any one of: “password”, “pass”, “passwd”, “pwd”, “secret”, “token”, “secrete”. Note: this can be noisy and may generate false positives."
  },
  "B106": {
    "title": "B106: Test for use of hard-coded password function arguments",
    "description": "The use of hard-coded passwords increases the possibility of password guessing tremendously. This plugin test looks for all function calls being passed a keyword argument that is a string literal. It checks that the assigned local variable does not look like a password. Variables are considered to look like a password if they have match any one of: “password”, “pass”, “passwd”, “pwd”, “secret”, “token”, “secrete”. Note: this can be noisy and may generate false positives."
  },
  "B107": {
    "title": "B107: Test for use of hard-coded password argument defaults",
    "description": "The use of hard-coded passwords increases the possibility of password guessing tremendously. This plugin test looks for all function definitions that specify a default string literal for some argument. It checks that the argument does not look like a password. Variables are considered to look like a password if they have match any one of: “password”, “pass”, “passwd”, “pwd”, “secret”, “token”, “secrete”. Note: this can be noisy and may generate false positives."
  },
  "B108": {
    "title": "B108: Test for insecure usage of tmp file/directory",
    "description": "Safely creating a temporary file or directory means following a number of rules (see the references for more details). This plugin test looks for strings starting with (configurable) commonly used temporary paths, for example: /tmp, /var/tmp, /dev/shm etc."
  },
  "B109": {
    "title": "B109: Test for a password based config option not marked secret",
    "description": "Passwords are sensitive and must be protected appropriately. In OpenStack Oslo there is an option to mark options “secret” which will ensure that they are not logged. This plugin detects usages of oslo configuration functions that appear to deal with strings ending in ‘password’ and flag usages where they have not been marked secret. If such a value is found a MEDIUM severity error is generated. If ‘False’ or ‘None’ are explicitly set, Bandit will return a MEDIUM confidence issue. If Bandit can’t determine the value of secret it will return a LOW confidence issue."
  },
  "B110": {
    "title": "B110: Test for a pass in the except block",
    "description": "Errors in Python code bases are typically communicated using Exceptions. An exception object is ‘raised’ in the event of an error and can be ‘caught’ at a later point in the program, typically some error handling or logging action will then be performed. However, it is possible to catch an exception and silently ignore it. This pattern is considered bad practice in general, but also represents a potential security issue. A larger than normal volume of errors from a service can indicate an attempt is being made to disrupt or interfere with it. Thus errors should, at the very least, be logged. There are rare situations where it is desirable to suppress errors, but this is typically done with specific exception types, rather than the base Exception class (or no type). To accommodate this, the test may be configured to ignore ‘try, except, pass’ where the exception is typed."
  },
  "B111": {
    "title": "B111: Test for the use of rootwrap running as root",
    "description": "Running commands as root dramatically increase their potential risk. Running commands with restricted user privileges provides defense in depth against command injection attacks, or developer and configuration error. This plugin test checks for specific methods being called with a keyword parameter run_as_root set to True, a common OpenStack idiom."
  },
  "B112": {
    "title": "B112: Test for a continue in the except block",
    "description": "Errors in Python code bases are typically communicated using Exceptions. An exception object is ‘raised’ in the event of an error and can be ‘caught’ at a later point in the program, typically some error handling or logging action will then be performed. However, it is possible to catch an exception and silently ignore it while in a loop. This pattern is considered bad practice in general, but also represents a potential security issue. A larger than normal volume of errors from a service can indicate an attempt is being made to disrupt or interfere with it. Thus errors should, at the very least, be logged. There are rare situations where it is desirable to suppress errors, but this is typically done with specific exception types, rather than the base Exception class (or no type). To accommodate this, the test may be configured to ignore ‘try, except, continue’ where the exception is typed."
  },
  "B201": {
    "title": "B201: Test for use of flask app with debug set to true",
    "description": "Running Flask applications in debug mode results in the Werkzeug debugger being enabled. This includes a feature that allows arbitrary code execution. Documentation for both Flask and Werkzeug strongly suggests that debug mode should never be enabled on production systems. Operating a production server with debug mode enabled was the probable cause of the Patreon breach in 2015."
  },
  "B301": {
    "title": "B301: Blacklist various Python calls known to be dangerous: pickle",
    "description": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
  },
  "B302": {
    "title": "B302: Blacklist various Python calls known to be dangerous: marshal",
    "description": "Deserialization with the marshal module is possibly dangerous."
  },
  "B303": {
    "title": "B303: Blacklist various Python calls known to be dangerous: md5",
    "description": "Use of insecure MD2, MD4, MD5, or SHA1 hash function."
  },
  "B304": {
    "title": "B304: Blacklist various Python calls known to be dangerous: ciphers",
    "description": "Use of insecure cipher or cipher mode. Replace with a known secure cipher such as AES."
  },
  "B305": {
    "title": "B305: Blacklist various Python calls known to be dangerous: cipher_modes",
    "description": "Use of insecure cipher or cipher mode. Replace with a known secure cipher such as AES."
  },
  "B306": {
    "title": "B306: Blacklist various Python calls known to be dangerous: mktemp_q",
    "description": "Use of insecure and deprecated function (mktemp)."
  },
  "B307": {
    "title": "B307: Blacklist various Python calls known to be dangerous: eval",
    "description": "Use of possibly insecure function - consider using safer ast.literal_eval."
  },
  "B308": {
    "title": "B308: Blacklist various Python calls known to be dangerous: mark_safe",
    "description": "Use of mark_safe() may expose cross-site scripting vulnerabilities and should be reviewed."
  },
  "B309": {
    "title": "B309: Blacklist various Python calls known to be dangerous: httpsconnection",
    "description": "Use of HTTPSConnection on older versions of Python prior to 2.7.9 and 3.4.3 do not provide security, see https://wiki.openstack.org/wiki/OSSN/OSSN-0033"
  },
  "B310": {
    "title": "B310: Blacklist various Python calls known to be dangerous: urllib_urlopen",
    "description": "Audit url open for permitted schemes. Allowing use of ‘file:’’ or custom schemes is often unexpected."
  },
  "B311": {
    "title": "B311: Blacklist various Python calls known to be dangerous: random",
    "description": "Standard pseudo-random generators are not suitable for security/cryptographic purposes."
  },
  "B312": {
    "title": "B312: Blacklist various Python calls known to be dangerous: telnetlib",
    "description": "Telnet-related functions are being called. Telnet is considered insecure. Use SSH or some other encrypted protocol."
  },
  "B313": {
    "title": "B313: Blacklist various Python calls known to be dangerous: xml_bad_cElementTree",
    "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents."
  },
  "B314": {
    "title": "B314: Blacklist various Python calls known to be dangerous: xml_bad_ElementTree",
    "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents."
  },
  "B315": {
    "title": "B315: Blacklist various Python calls known to be dangerous: xml_bad_expatreader",
    "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents."
  },
  "B316": {
    "title": "B316: Blacklist various Python calls known to be dangerous: xml_bad_expatbuilder",
    "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents."
  },
  "B317": {
    "title": "B317: Blacklist various Python calls known to be dangerous: xml_bad_sax",
    "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents."
  },
  "B318": {
    "title": "B318: Blacklist various Python calls known to be dangerous: xml_bad_minidom",
    "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents."
  },
  "B319": {
    "title": "B319: Blacklist various Python calls known to be dangerous: xml_bad_pulldom",
    "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents."
  },
  "B320": {
    "title": "B320: Blacklist various Python calls known to be dangerous: xml_bad_etree",
    "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Methods should be replaced with their defusedxml equivalents."
  },
  "B321": {
    "title": "B321: Blacklist various Python calls known to be dangerous: ftplib",
    "description": "FTP-related functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol."
  },
  "B322": {
    "title": "B322: Blacklist various Python calls known to be dangerous: input",
    "description": "The input method in Python 2 will read from standard input, evaluate and run the resulting string as python source code. This is similar, though in many ways worse, then using eval. On Python 2, use raw_input instead, input is safe in Python 3."
  },
  "B323": {
    "title": "B323: Blacklist various Python calls known to be dangerous: unverified_context",
    "description": "By default, Python will create a secure, verified ssl context for use in such classes as HTTPSConnection. However, it still allows using an insecure context via the _create_unverified_context that reverts to the previous behavior that does not validate certificates or perform hostname checks."
  },
  "B324": {
    "title": "B324: Test for use of insecure md4 and md5 hash functions in hashlib.new()",
    "description": "This plugin checks for the usage of the insecure MD4 and MD5 hash functions in ``hashlib.new`` function. The ``hashlib.new`` function provides the ability to construct a new hashing object using the named algorithm. This can be used to create insecure hash functions like MD4 and MD5 if they are passed as algorithm names to this function. This is similar to B303 blacklist check, except that this checks for insecure hash functions created using ``hashlib.new`` function."
  },
  "B325": {
    "title": "B325: Blacklist various Python calls known to be dangerous: tempnam",
    "description": "Use of os.tempnam() and os.tmpnam() is vulnerable to symlink attacks. Consider using tmpfile() instead."
  },
  "B401": {
    "title": "B401: Blacklist various Python imports known to be dangerous: import_telnetlib",
    "description": "A telnet-related module is being imported. Telnet is considered insecure. Use SSH or some other encrypted protocol."
  },
  "B402": {
    "title": "B402: Blacklist various Python imports known to be dangerous: import_ftplib",
    "description": "A FTP-related module is being imported. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol."
  },
  "B403": {
    "title": "B403: Blacklist various Python imports known to be dangerous: import_pickle",
    "description": "Consider possible security implications associated with these modules."
  },
  "B404": {
    "title": "B404: Blacklist various Python imports known to be dangerous: import_subprocess",
    "description": "Consider possible security implications associated with these modules."
  },
  "B405": {
    "title": "B405: Blacklist various Python imports known to be dangerous: import_xml_etree",
    "description": "Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
  },
  "B406": {
    "title": "B406: Blacklist various Python imports known to be dangerous: import_xml_sax",
    "description": "Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
  },
  "B407": {
    "title": "B407: Blacklist various Python imports known to be dangerous: import_xml_expat",
    "description": "Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
  },
  "B408": {
    "title": "B408: Blacklist various Python imports known to be dangerous: import_xml_minidom",
    "description": "Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
  },
  "B409": {
    "title": "B409: Blacklist various Python imports known to be dangerous: import_xml_pulldom",
    "description": "Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
  },
  "B410": {
    "title": "B410: Blacklist various Python imports known to be dangerous: import_lxml",
    "description": "Using various methods to parse untrusted XML data is known to be vulnerable to XML attacks. Replace vulnerable imports with the equivalent defusedxml package."
  },
  "B411": {
    "title": "B411: Blacklist various Python imports known to be dangerous: import_xmlrpclib",
    "description": "XMLRPC is particularly dangerous as it is also concerned with communicating data over a network. Use defused.xmlrpc.monkey_patch() function to monkey-patch xmlrpclib and mitigate remote XML attacks."
  },
  "B412": {
    "title": "B412: Blacklist various Python imports known to be dangerous: import_httpoxy",
    "description": "httpoxy is a set of vulnerabilities that affect application code running in CGI, or CGI-like environments. The use of CGI for web applications should be avoided to prevent this class of attack. More details are available at https://httpoxy.org/."
  },
  "B413": {
    "title": "B413: Blacklist various Python imports known to be dangerous: import_pycrypto",
    "description": "pycrypto library is known to have publicly disclosed buffer overflow vulnerability https://github.com/dlitz/pycrypto/issues/176. It is no longer actively maintained and has been deprecated in favor of pyca/cryptography library."
  },
  "B414": {
    "title": "B414: Blacklist various Python imports known to be dangerous: import_pycryptodome",
    "description": "pycryptodome is a direct fork of pycrypto that has not fully addressed the issues inherent in PyCrypto. It seems to exist, mainly, as an API compatible continuation of pycrypto and should be deprecated in favor of pyca/cryptography which has more support among the Python community."
  },
  "B501": {
    "title": "B501: Test for missing certificate validation",
    "description": "Encryption in general is typically critical to the security of many applications. Using TLS can greatly increase security by guaranteeing the identity of the party you are communicating with. This is accomplished by one or both parties presenting trusted certificates during the connection initialization phase of TLS. When request methods are used certificates are validated automatically which is the desired behavior. If certificate validation is explicitly turned off Bandit will return a HIGH severity error."
  },
  "B502": {
    "title": "B502: Test for SSL use with bad version used",
    "description": "Several highly publicized exploitable flaws have been discovered in all versions of SSL and early versions of TLS. It is strongly recommended that use of the following known broken protocol versions be avoided: SSL v2, SSL v3, TLS v1, TLS v1.1. This plugin test scans for calls to Python methods with parameters that indicate the used broken SSL/TLS protocol versions. Currently, detection supports methods using Python’s native SSL/TLS support and the pyOpenSSL module. A HIGH severity warning will be reported whenever known broken protocol versions are detected. It is worth noting that native support for TLS 1.2 is only available in more recent Python versions, specifically 2.7.9 and up, and 3.x. Amongst the available SSL/TLS versions provided by Python/pyOpenSSL there exists the option to use SSLv23. This very poorly named option actually means “use the highest version of SSL/TLS supported by both the server and client”. This may (and should be) a version well in advance of SSL v2 or v3. Bandit can scan for the use of SSLv23 if desired, but its detection does not necessarily indicate a problem. When using SSLv23 it is important to also provide flags to explicitly exclude bad versions of SSL/TLS from the protocol versions considered. Both the Python native and pyOpenSSL modules provide the OP_NO_SSLv2 and OP_NO_SSLv3 flags for this purpose."
  },
  "B503": {
    "title": "B503: Test for SSL use with bad defaults specified",
    "description": "This plugin is part of a family of tests that detect the use of known bad versions of SSL/TLS. Specifically, this plugin test scans for Python methods with default parameter values that specify the use of broken SSL/TLS protocol versions. Currently, detection supports methods using Python’s native SSL/TLS support and the pyOpenSSL module. A MEDIUM severity warning will be reported whenever known broken protocol versions are detected."
  },
  "B504": {
    "title": "B504: Test for SSL use with no version specified",
    "description": "This plugin is part of a family of tests that detect the use of known bad versions of SSL/TLS. Specifically, This plugin test scans for specific methods in Python’s native SSL/TLS support and the pyOpenSSL module that configure the version of SSL/TLS protocol to use. These methods are known to provide default value that maximize compatibility, but permit use of the aforementioned broken protocol versions. A LOW severity warning will be reported whenever this is detected."
  },
  "B505": {
    "title": "B505: Test for weak cryptographic key use",
    "description": "As computational power increases, so does the ability to break ciphers with smaller key lengths. The recommended key length size for RSA and DSA algorithms is 2048 and higher. 1024 bits and below are now considered breakable. EC key length sizes are recommended to be 224 and higher with 160 and below considered breakable. This plugin test checks for use of any key less than those limits and returns a high severity error if lower than the lower threshold and a medium severity error for those lower than the higher threshold."
  },
  "B506": {
    "title": "B506: Test for use of yaml load",
    "description": "This plugin test checks for the unsafe usage of the yaml.load function from the PyYAML package. The yaml.load function provides the ability to construct an arbitrary Python object, which may be dangerous if you receive a YAML document from an untrusted source. The function yaml.safe_load limits this ability to simple Python objects like integers or lists. Please see http://pyyaml.org/wiki/PyYAMLDocumentation#LoadingYAML for more information on yaml.load and yaml.safe_load"
  },
  "B507": {
    "title": "B507: Test for missing host key validation",
    "description": "Encryption in general is typically critical to the security of many applications. Using SSH can greatly increase security by guaranteeing the identity of the party you are communicating with. This is accomplished by one or both parties presenting trusted host keys during the connection initialization phase of SSH. When paramiko methods are used, host keys are verified by default. If host key verification is disabled, Bandit will return a HIGH severity error."
  },
  "B601": {
    "title": "B601: Test for shell injection within Paramiko",
    "description": "Paramiko is a Python library designed to work with the SSH2 protocol for secure (encrypted and authenticated) connections to remote machines. It is intended to run commands on a remote host. These commands are run within a shell on the target and are thus vulnerable to various shell injection attacks. Bandit reports a MEDIUM issue when it detects the use of Paramiko’s “exec_command” or “invoke_shell” methods advising the user to check inputs are correctly sanitized."
  },
  "B602": {
    "title": "B602: Test for use of popen with shell equals true",
    "description": "Python possesses many mechanisms to invoke an external executable. However, doing so may present a security issue if appropriate care is not taken to sanitize any user provided or variable input. This plugin test is part of a family of tests built to check for process spawning and warn appropriately. Specifically, this test looks for the spawning of a subprocess using a command shell. This type of subprocess invocation is dangerous as it is vulnerable to various shell injection attacks. Great care should be taken to sanitize all input in order to mitigate this risk. Calls of this type are identified by a parameter of ‘shell=True’ being given. Additionally, this plugin scans the command string given and adjusts its reported severity based on how it is presented. If the command string is a simple static string containing no special shell characters, then the resulting issue has low severity. If the string is static, but contains shell formatting characters or wildcards, then the reported issue is medium. Finally, if the string is computed using Python’s string manipulation or formatting operations, then the reported issue has high severity. These severity levels reflect the likelihood that the code is vulnerable to injection."
  },
  "B603": {
    "title": "B603: Test for use of subprocess without shell equals true",
    "description": "Python possesses many mechanisms to invoke an external executable. However, doing so may present a security issue if appropriate care is not taken to sanitize any user provided or variable input. This plugin test is part of a family of tests built to check for process spawning and warn appropriately. Specifically, this test looks for the spawning of a subprocess without the use of a command shell. This type of subprocess invocation is not vulnerable to shell injection attacks, but care should still be taken to ensure validity of input. Because this is a lesser issue than that described in subprocess_popen_with_shell_equals_true a LOW severity warning is reported."
  },
  "B604": {
    "title": "B604: Test for any function with shell equals true",
    "description": "Python possesses many mechanisms to invoke an external executable. However, doing so may present a security issue if appropriate care is not taken to sanitize any user provided or variable input. This plugin test is part of a family of tests built to check for process spawning and warn appropriately. Specifically, this plugin test interrogates method calls for the presence of a keyword parameter shell equalling true. It is related to detection of shell injection issues and is intended to catch custom wrappers to vulnerable methods that may have been created."
  },
  "B605": {
    "title": "B605: Test for starting a process with a shell",
    "description": "Python possesses many mechanisms to invoke an external executable. However, doing so may present a security issue if appropriate care is not taken to sanitize any user provided or variable input. This plugin test is part of a family of tests built to check for process spawning and warn appropriately. Specifically, this test looks for the spawning of a subprocess using a command shell. This type of subprocess invocation is dangerous as it is vulnerable to various shell injection attacks. Great care should be taken to sanitize all input in order to mitigate this risk. Calls of this type are identified by the use of certain commands which are known to use shells. Bandit will report a LOW severity warning."
  },
  "B606": {
    "title": "B606: Test for starting a process with no shell",
    "description": "Python possesses many mechanisms to invoke an external executable. However, doing so may present a security issue if appropriate care is not taken to sanitize any user provided or variable input. This plugin test is part of a family of tests built to check for process spawning and warn appropriately. Specifically, this test looks for the spawning of a subprocess in a way that doesn’t use a shell. Although this is generally safe, it maybe useful for penetration testing workflows to track where external system calls are used. As such a LOW severity message is generated."
  },
  "B607": {
    "title": "B607: Test for starting a process with a partial path",
    "description": "Python possesses many mechanisms to invoke an external executable. If the desired executable path is not fully qualified relative to the filesystem root then this may present a potential security risk. In POSIX environments, the PATH environment variable is used to specify a set of standard locations that will be searched for the first matching named executable. While convenient, this behavior may allow a malicious actor to exert control over a system. If they are able to adjust the contents of the PATH variable, or manipulate the file system, then a bogus executable may be discovered in place of the desired one. This executable will be invoked with the user privileges of the Python process that spawned it, potentially a highly privileged user. This test will scan the parameters of all configured Python methods, looking for paths that do not start at the filesystem root, that is, do not have a leading ‘/’ character."
  },
  "B608": {
    "title": "B608: Test for SQL injection",
    "description": "An SQL injection attack consists of insertion or “injection” of a SQL query via the input data given to an application. It is a very common attack vector. This plugin test looks for strings that resemble SQL statements that are involved in some form of string building operation. Unless care is taken to sanitize and control the input data when building such SQL statement strings, an injection attack becomes possible. If strings of this nature are discovered, a LOW confidence issue is reported. In order to boost result confidence, this plugin test will also check to see if the discovered string is in use with standard Python DBAPI calls execute or executemany. If so, a MEDIUM issue is reported."
  },
  "B609": {
    "title": "B609: Test for use of wildcard injection",
    "description": "Python provides a number of methods that emulate the behavior of standard Linux command line utilities. Like their Linux counterparts, these commands may take a wildcard “*” character in place of a file system path. This is interpreted to mean “any and all files or folders” and can be used to build partially qualified paths, such as “/home/user/*”. The use of partially qualified paths may result in unintended consequences if an unexpected file or symlink is placed into the path location given. This becomes particularly dangerous when combined with commands used to manipulate file permissions or copy data off of a system."
  },
  "B610": {
    "title": "B610: Potential SQL injection on extra function"
  },
  "B611": {
    "title": "B611: Potential SQL injection on RawSQL function"
  },
  "B701": {
    "title": "B701: Test for not auto escaping in jinja2",
    "description": "Jinja2 is a Python HTML templating system. It is typically used to build web applications, though appears in other places well, notably the Ansible automation system. When configuring the Jinja2 environment, the option to use autoescaping on input can be specified. When autoescaping is enabled, Jinja2 will filter input strings to escape any HTML content submitted via template variables. Without escaping HTML input the application becomes vulnerable to Cross Site Scripting (XSS) attacks. Unfortunately, autoescaping is False by default. Thus this plugin test will warn on omission of an autoescape setting, as well as an explicit setting of false. A HIGH severity warning is generated in either of these scenarios."
  },
  "B702": {
    "title": "B702: Test for use of mako templates",
    "description": "Mako is a Python templating system often used to build web applications. It is the default templating system used in Pylons and Pyramid. Unlike Jinja2 (an alternative templating system), Mako has no environment wide variable escaping mechanism. Because of this, all input variables must be carefully escaped before use to prevent possible vulnerabilities to Cross Site Scripting (XSS) attacks."
  },
  "B703": {
    "title": "B703: Potential XSS on mark_safe function"
  }
}
